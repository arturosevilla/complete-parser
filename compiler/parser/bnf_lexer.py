
class Token(object):
    def __init__(self, type_, lexeme):
        self.type_ = type_
        self.lexeme = lexeme


class Lexer(object):
    def __init__(self, code):
        self.code = code
        self.stop_chars = [' ', '\t', '\n']
        # black magic incantions go here (autogenerated NFA)
        self.goto_nfa = {0: {'': [1, 245, 251, 253, 497]}, 1: {'<': [2]}, 2: {'': [3]}, 3: {'': [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108]}, 4: {'a': [5]}, 5: {'': [110]}, 6: {'b': [7]}, 7: {'': [110]}, 8: {'c': [9]}, 9: {'': [110]}, 10: {'d': [11]}, 11: {'': [110]}, 12: {'e': [13]}, 13: {'': [110]}, 14: {'f': [15]}, 15: {'': [110]}, 16: {'g': [17]}, 17: {'': [110]}, 18: {'h': [19]}, 19: {'': [110]}, 20: {'i': [21]}, 21: {'': [110]}, 22: {'j': [23]}, 23: {'': [110]}, 24: {'k': [25]}, 25: {'': [110]}, 26: {'l': [27]}, 27: {'': [110]}, 28: {'m': [29]}, 29: {'': [110]}, 30: {'n': [31]}, 31: {'': [110]}, 32: {'o': [33]}, 33: {'': [110]}, 34: {'p': [35]}, 35: {'': [110]}, 36: {'q': [37]}, 37: {'': [110]}, 38: {'r': [39]}, 39: {'': [110]}, 40: {'s': [41]}, 41: {'': [110]}, 42: {'t': [43]}, 43: {'': [110]}, 44: {'u': [45]}, 45: {'': [110]}, 46: {'v': [47]}, 47: {'': [110]}, 48: {'w': [49]}, 49: {'': [110]}, 50: {'x': [51]}, 51: {'': [110]}, 52: {'y': [53]}, 53: {'': [110]}, 54: {'z': [55]}, 55: {'': [110]}, 56: {'A': [57]}, 57: {'': [110]}, 58: {'B': [59]}, 59: {'': [110]}, 60: {'C': [61]}, 61: {'': [110]}, 62: {'D': [63]}, 63: {'': [110]}, 64: {'E': [65]}, 65: {'': [110]}, 66: {'F': [67]}, 67: {'': [110]}, 68: {'G': [69]}, 69: {'': [110]}, 70: {'H': [71]}, 71: {'': [110]}, 72: {'I': [73]}, 73: {'': [110]}, 74: {'J': [75]}, 75: {'': [110]}, 76: {'K': [77]}, 77: {'': [110]}, 78: {'L': [79]}, 79: {'': [110]}, 80: {'M': [81]}, 81: {'': [110]}, 82: {'N': [83]}, 83: {'': [110]}, 84: {'O': [85]}, 85: {'': [110]}, 86: {'P': [87]}, 87: {'': [110]}, 88: {'Q': [89]}, 89: {'': [110]}, 90: {'R': [91]}, 91: {'': [110]}, 92: {'S': [93]}, 93: {'': [110]}, 94: {'T': [95]}, 95: {'': [110]}, 96: {'U': [97]}, 97: {'': [110]}, 98: {'V': [99]}, 99: {'': [110]}, 100: {'W': [101]}, 101: {'': [110]}, 102: {'X': [103]}, 103: {'': [110]}, 104: {'Y': [105]}, 105: {'': [110]}, 106: {'Z': [107]}, 107: {'': [110]}, 108: {'_': [109]}, 109: {'': [110]}, 110: {'': [111]}, 111: {'': [112, 242]}, 112: {'': [113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239]}, 113: {'A': [114]}, 114: {'': [241]}, 115: {'B': [116]}, 116: {'': [241]}, 117: {'C': [118]}, 118: {'': [241]}, 119: {'D': [120]}, 120: {'': [241]}, 121: {'E': [122]}, 122: {'': [241]}, 123: {'F': [124]}, 124: {'': [241]}, 125: {'G': [126]}, 126: {'': [241]}, 127: {'H': [128]}, 128: {'': [241]}, 129: {'I': [130]}, 130: {'': [241]}, 131: {'J': [132]}, 132: {'': [241]}, 133: {'K': [134]}, 134: {'': [241]}, 135: {'L': [136]}, 136: {'': [241]}, 137: {'M': [138]}, 138: {'': [241]}, 139: {'N': [140]}, 140: {'': [241]}, 141: {'O': [142]}, 142: {'': [241]}, 143: {'P': [144]}, 144: {'': [241]}, 145: {'Q': [146]}, 146: {'': [241]}, 147: {'R': [148]}, 148: {'': [241]}, 149: {'S': [150]}, 150: {'': [241]}, 151: {'T': [152]}, 152: {'': [241]}, 153: {'U': [154]}, 154: {'': [241]}, 155: {'V': [156]}, 156: {'': [241]}, 157: {'W': [158]}, 158: {'': [241]}, 159: {'X': [160]}, 160: {'': [241]}, 161: {'Y': [162]}, 162: {'': [241]}, 163: {'Z': [164]}, 164: {'': [241]}, 165: {'-': [166]}, 166: {'': [241]}, 167: {'0': [168]}, 168: {'': [241]}, 169: {'1': [170]}, 170: {'': [241]}, 171: {'2': [172]}, 172: {'': [241]}, 173: {'3': [174]}, 174: {'': [241]}, 175: {'4': [176]}, 176: {'': [241]}, 177: {'5': [178]}, 178: {'': [241]}, 179: {'6': [180]}, 180: {'': [241]}, 181: {'7': [182]}, 182: {'': [241]}, 183: {'8': [184]}, 184: {'': [241]}, 185: {'9': [186]}, 186: {'': [241]}, 187: {'a': [188]}, 188: {'': [241]}, 189: {'b': [190]}, 190: {'': [241]}, 191: {'c': [192]}, 192: {'': [241]}, 193: {'d': [194]}, 194: {'': [241]}, 195: {'e': [196]}, 196: {'': [241]}, 197: {'f': [198]}, 198: {'': [241]}, 199: {'g': [200]}, 200: {'': [241]}, 201: {'h': [202]}, 202: {'': [241]}, 203: {'i': [204]}, 204: {'': [241]}, 205: {'j': [206]}, 206: {'': [241]}, 207: {'k': [208]}, 208: {'': [241]}, 209: {'l': [210]}, 210: {'': [241]}, 211: {'m': [212]}, 212: {'': [241]}, 213: {'n': [214]}, 214: {'': [241]}, 215: {'o': [216]}, 216: {'': [241]}, 217: {'p': [218]}, 218: {'': [241]}, 219: {'q': [220]}, 220: {'': [241]}, 221: {'r': [222]}, 222: {'': [241]}, 223: {'s': [224]}, 224: {'': [241]}, 225: {'t': [226]}, 226: {'': [241]}, 227: {'u': [228]}, 228: {'': [241]}, 229: {'v': [230]}, 230: {'': [241]}, 231: {'w': [232]}, 232: {'': [241]}, 233: {'x': [234]}, 234: {'': [241]}, 235: {'y': [236]}, 236: {'': [241]}, 237: {'z': [238]}, 238: {'': [241]}, 239: {'_': [240]}, 240: {'': [241]}, 241: {'': [112, 242]}, 242: {'': [243]}, 243: {'>': [244]}, 245: {':': [246]}, 246: {'': [247]}, 247: {':': [248]}, 248: {'': [249]}, 249: {'=': [250]}, 251: {'|': [252]}, 253: {'"': [254]}, 254: {'': [255]}, 255: {'': [256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360]}, 256: {'a': [257]}, 257: {'': [362]}, 258: {'b': [259]}, 259: {'': [362]}, 260: {'c': [261]}, 261: {'': [362]}, 262: {'d': [263]}, 263: {'': [362]}, 264: {'e': [265]}, 265: {'': [362]}, 266: {'f': [267]}, 267: {'': [362]}, 268: {'g': [269]}, 269: {'': [362]}, 270: {'h': [271]}, 271: {'': [362]}, 272: {'i': [273]}, 273: {'': [362]}, 274: {'j': [275]}, 275: {'': [362]}, 276: {'k': [277]}, 277: {'': [362]}, 278: {'l': [279]}, 279: {'': [362]}, 280: {'m': [281]}, 281: {'': [362]}, 282: {'n': [283]}, 283: {'': [362]}, 284: {'o': [285]}, 285: {'': [362]}, 286: {'p': [287]}, 287: {'': [362]}, 288: {'q': [289]}, 289: {'': [362]}, 290: {'r': [291]}, 291: {'': [362]}, 292: {'s': [293]}, 293: {'': [362]}, 294: {'t': [295]}, 295: {'': [362]}, 296: {'u': [297]}, 297: {'': [362]}, 298: {'v': [299]}, 299: {'': [362]}, 300: {'w': [301]}, 301: {'': [362]}, 302: {'x': [303]}, 303: {'': [362]}, 304: {'y': [305]}, 305: {'': [362]}, 306: {'z': [307]}, 307: {'': [362]}, 308: {'A': [309]}, 309: {'': [362]}, 310: {'B': [311]}, 311: {'': [362]}, 312: {'C': [313]}, 313: {'': [362]}, 314: {'D': [315]}, 315: {'': [362]}, 316: {'E': [317]}, 317: {'': [362]}, 318: {'F': [319]}, 319: {'': [362]}, 320: {'G': [321]}, 321: {'': [362]}, 322: {'H': [323]}, 323: {'': [362]}, 324: {'I': [325]}, 325: {'': [362]}, 326: {'J': [327]}, 327: {'': [362]}, 328: {'K': [329]}, 329: {'': [362]}, 330: {'L': [331]}, 331: {'': [362]}, 332: {'M': [333]}, 333: {'': [362]}, 334: {'N': [335]}, 335: {'': [362]}, 336: {'O': [337]}, 337: {'': [362]}, 338: {'P': [339]}, 339: {'': [362]}, 340: {'Q': [341]}, 341: {'': [362]}, 342: {'R': [343]}, 343: {'': [362]}, 344: {'S': [345]}, 345: {'': [362]}, 346: {'T': [347]}, 347: {'': [362]}, 348: {'U': [349]}, 349: {'': [362]}, 350: {'V': [351]}, 351: {'': [362]}, 352: {'W': [353]}, 353: {'': [362]}, 354: {'X': [355]}, 355: {'': [362]}, 356: {'Y': [357]}, 357: {'': [362]}, 358: {'Z': [359]}, 359: {'': [362]}, 360: {'_': [361]}, 361: {'': [362]}, 362: {'': [363]}, 363: {'': [364, 494]}, 364: {'': [365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467, 469, 471, 473, 475, 477, 479, 481, 483, 485, 487, 489, 491]}, 365: {'A': [366]}, 366: {'': [493]}, 367: {'B': [368]}, 368: {'': [493]}, 369: {'C': [370]}, 370: {'': [493]}, 371: {'D': [372]}, 372: {'': [493]}, 373: {'E': [374]}, 374: {'': [493]}, 375: {'F': [376]}, 376: {'': [493]}, 377: {'G': [378]}, 378: {'': [493]}, 379: {'H': [380]}, 380: {'': [493]}, 381: {'I': [382]}, 382: {'': [493]}, 383: {'J': [384]}, 384: {'': [493]}, 385: {'K': [386]}, 386: {'': [493]}, 387: {'L': [388]}, 388: {'': [493]}, 389: {'M': [390]}, 390: {'': [493]}, 391: {'N': [392]}, 392: {'': [493]}, 393: {'O': [394]}, 394: {'': [493]}, 395: {'P': [396]}, 396: {'': [493]}, 397: {'Q': [398]}, 398: {'': [493]}, 399: {'R': [400]}, 400: {'': [493]}, 401: {'S': [402]}, 402: {'': [493]}, 403: {'T': [404]}, 404: {'': [493]}, 405: {'U': [406]}, 406: {'': [493]}, 407: {'V': [408]}, 408: {'': [493]}, 409: {'W': [410]}, 410: {'': [493]}, 411: {'X': [412]}, 412: {'': [493]}, 413: {'Y': [414]}, 414: {'': [493]}, 415: {'Z': [416]}, 416: {'': [493]}, 417: {'-': [418]}, 418: {'': [493]}, 419: {'0': [420]}, 420: {'': [493]}, 421: {'1': [422]}, 422: {'': [493]}, 423: {'2': [424]}, 424: {'': [493]}, 425: {'3': [426]}, 426: {'': [493]}, 427: {'4': [428]}, 428: {'': [493]}, 429: {'5': [430]}, 430: {'': [493]}, 431: {'6': [432]}, 432: {'': [493]}, 433: {'7': [434]}, 434: {'': [493]}, 435: {'8': [436]}, 436: {'': [493]}, 437: {'9': [438]}, 438: {'': [493]}, 439: {'a': [440]}, 440: {'': [493]}, 441: {'b': [442]}, 442: {'': [493]}, 443: {'c': [444]}, 444: {'': [493]}, 445: {'d': [446]}, 446: {'': [493]}, 447: {'e': [448]}, 448: {'': [493]}, 449: {'f': [450]}, 450: {'': [493]}, 451: {'g': [452]}, 452: {'': [493]}, 453: {'h': [454]}, 454: {'': [493]}, 455: {'i': [456]}, 456: {'': [493]}, 457: {'j': [458]}, 458: {'': [493]}, 459: {'k': [460]}, 460: {'': [493]}, 461: {'l': [462]}, 462: {'': [493]}, 463: {'m': [464]}, 464: {'': [493]}, 465: {'n': [466]}, 466: {'': [493]}, 467: {'o': [468]}, 468: {'': [493]}, 469: {'p': [470]}, 470: {'': [493]}, 471: {'q': [472]}, 472: {'': [493]}, 473: {'r': [474]}, 474: {'': [493]}, 475: {'s': [476]}, 476: {'': [493]}, 477: {'t': [478]}, 478: {'': [493]}, 479: {'u': [480]}, 480: {'': [493]}, 481: {'v': [482]}, 482: {'': [493]}, 483: {'w': [484]}, 484: {'': [493]}, 485: {'x': [486]}, 486: {'': [493]}, 487: {'y': [488]}, 488: {'': [493]}, 489: {'z': [490]}, 490: {'': [493]}, 491: {'_': [492]}, 492: {'': [493]}, 493: {'': [364, 494]}, 494: {'': [495]}, 495: {'"': [496]}, 497: {'"': [498]}, 498: {'': [499]}, 499: {'"': [500]}}
        self.final_states= {496: 'RULE_TERMINAL', 252: 'OR', 250: 'RULE_DEFINITION', 244: 'RULE_NAME', 500: 'EMPTY'}

        self.reset()

    def eclosure(self, states):
        closed = set(states)
        for state in states:
            closed.update(
                self.eclosure(self.goto_nfa.get(state, {}).get('', []))
            )
        return closed

    def reset(self):
        self.current = 0
        self.state = self.eclosure([0])

    def _getchar(self):
        if self.current >= len(self.code):
            return None
        input_ = self.code[self.current]
        return input_

    def get_next_token(self):
        input_ = self._getchar()
        self.state = self.eclosure([0])
        while input_ in self.stop_chars:
            self.current += 1
            input_ = self._getchar()
        if input_ is None:
            return None
        lexeme_begin = self.current
        # hokus pokus (NFA simulation)
        while input_ is not None:
            next_state = set()
            for state in self.state:
                transition = self.goto_nfa.get(state, {}).get(input_)
                if transition is not None:
                    for new_state in self.eclosure(transition):
                        next_state.add(new_state)
            if len(next_state) == 0:
                break
            self.state = next_state
            self.current += 1
            input_ = self._getchar()
        lexeme = self.code[lexeme_begin:self.current].strip()
        if len(self.state) == 0:
            raise ValueError('Unknown lexeme: ' + lexeme)

        # we look for the first defined rule
        min_state = lexeme_type = None
        for state in self.state:
            if state < min_state or min_state is None:
                possible_type = self.final_states.get(state)
                if possible_type is not None:
                    min_state = state
                    lexeme_type = possible_type

        if lexeme_type is None:
            raise ValueError('Unknown lexeme: ' + lexeme)
        return Token(lexeme_type, lexeme)

